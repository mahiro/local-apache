#!/usr/bin/env perl
use strict;
use warnings;

use File::Basename qw(basename dirname);
use File::Copy qw(copy);
use File::Path qw(mkpath);
use File::Spec;
use FindBin;

sub build_path {
    my $result = shift;

    for my $path (@_) {
        if (File::Spec->file_name_is_absolute($path)) {
            $result = $path;
        } else {
            $result = File::Spec->catfile($result, $path);
        }
    }

    return $result;
}

sub remove_quotes {
    my ($value) = @_;
    $value =~ s/\\"/"/g if $value =~ s/^"|"$//g;
    return $value;
}

sub load_settings {
    my $settings = {};
    my $output = `$FindBin::Bin/httpd -V`;

    while ($output =~ /^\s*-D\s*(.*?)=(.*)$/mg) {
        my ($name, $value) = ($1, $2);
        $settings->{$name} = remove_quotes($value);
    }

    return $settings;
}

sub _read_config_recursive {
    my ($httpd_root, $file_path, $conf, $seen) = @_;
    $conf ||= {};
    $seen ||= {};

    if ($seen->{$file_path}) {
        return $conf;
    } else {
        $seen->{$file_path} = 1;
    }

    for my $file (glob(build_path($httpd_root, $file_path))) {
        if (open(my $in, $file)) {
            while (my $line = <$in>) {
                if ($line =~ /^\s*Include(?:Optional)?\s+(.*?)\s*$/i) {
                    my $path = remove_quotes($1);
                    _read_config_recursive($httpd_root, $path, $conf, $seen);
                } elsif ($line =~ /^\s*LoadModule\s+(\S+)\s+(.*?)\s*$/i) {
                    my ($name, $path) = ($1, remove_quotes($2));
                    push @{$conf->{LoadedModules}}, $path;
                } else {
                    for my $directive (qw(PidFile LockFile TypesConfig MimeMagicFile)) {
                        if ($line =~ /^\s*$directive\s+(.*?)\s*$/i) {
                            my $value = remove_quotes($1);
                            $conf->{$directive} = $value;
                        }
                    }
                }
            }

            close $in;
        }
    }

    return $conf;
}

sub read_config {
    my ($httpd_root, $config_file) = @_;
    return _read_config_recursive($httpd_root, $config_file);
}

sub append_file {
    my ($file, $text) = @_;

    if (open(my $out, '>>', $file)) {
        print $out $text;
        close $out;
    } else {
        warn "Failed to open file for writing: $file\n";
    }
}

sub get_modules_dir {
    my ($conf) = @_;
    my $stat = {};

    for my $path (@{$conf->{LoadedModules}}) {
        my $dir = dirname($path);
        $stat->{$dir}++;
    }

    my $max_cnt = 0;
    my $max_dir;

    for my $dir (keys %$stat) {
        if ($max_cnt < $stat->{$dir}) {
            $max_cnt = $stat->{$dir};
            $max_dir = $dir;
        }
    }

    return $max_dir;
}

sub httpd_symlink {
    my ($httpd_root, $target, $path) = @_;
    $target = build_path($httpd_root, $target) if $target;

    if ($target && -e $target) {
        symlink $target, $path;
    } else {
        warn "Target for '$path' could not be found. Create symlink manually\n";
        warn "\$ ln -s /path/to/$path $path\n";
    }
}

sub process_skeleton {
    my ($skeleton, $ref_dir, $path) = @_;

    for my $key (keys %$skeleton) {
        my $handler = $skeleton->{$key};

        for my $ref_path (glob($path ne '' ? "$ref_dir/$path/$key" : "$ref_dir/$key")) {
            my $sub_path = substr($ref_path, length($ref_dir) + 1);

            if (ref $handler eq 'HASH') {
                if (!-e $sub_path && !-l $sub_path) {
                    mkpath($sub_path);
                    process_skeleton($handler, $ref_dir, $sub_path);
                }
            } elsif (ref $handler eq 'CODE') {
                if (!-e $sub_path) {
                    unlink $sub_path if -l $sub_path;

                    do {
                        local $_ = $sub_path;
                        $handler->();
                    };
                }
            }
        }
    }
}

sub main {
    if (@ARGV < 1) {
        my $cmd = basename($FindBin::Script);
        die "Usage: $cmd BASE_DIR\n";
    }

    my ($deploy_dir) = @ARGV;
    mkpath $deploy_dir if !-e $deploy_dir;
    chdir $deploy_dir;

    my $bin_dir = $FindBin::Bin;
    my $ref_dir = dirname($bin_dir);

    # Traverse skeleton
    my $symlink_ref = sub {
        symlink("$ref_dir/$_", $_);
    };

    my $copy_ref = sub {
        copy("$ref_dir/$_", $_);
    };

    my $skeleton = {
        'bin' => {
            'apachectl' => $symlink_ref,
            'httpd' => $symlink_ref,
        },
        'conf' => {
            'httpd.conf'=> $copy_ref,
            'local-apache.env' => $copy_ref,
            'include' => {
                '*.conf' => $copy_ref,
            },
        },
        'docs' => {
            'index.html' => $copy_ref,
        },
        'logs' => {},
        'run' => {},
    };

    process_skeleton($skeleton, $ref_dir, '');

    # Configure settings
    my $settings = load_settings();
    my $httpd_root = $settings->{HTTPD_ROOT};
    my $config_file = $settings->{SERVER_CONFIG_FILE};

    my $conf;

    # MIME types
    do {
        my $path = 'conf/mime.types';

        if (!-e $path) {
            unlink $path if -l $path;
            $conf ||= read_config($httpd_root, $config_file);
            my $target = $conf->{TypesConfig} || $settings->{AP_TYPES_CONFIG_FILE} ||
                build_path(dirname($config_file), 'mime.types');
            httpd_symlink $httpd_root, $target, $path;
        }
    };

    # Magic
    do {
        my $path = 'conf/magic';

        if (!-e $path) {
            unlink $path if -l $path;
            $conf ||= read_config($httpd_root, $config_file);
            my $target = $conf->{MimeMagicFile} || build_path(dirname($config_file), 'magic');
            httpd_symlink $httpd_root, $target, $path;
        }
    };

    # Modules
    do {
        my $path = 'modules';

        if (!-e $path) {
            unlink $path if -l $path;
            $conf ||= read_config($httpd_root, $config_file);
            my $target = get_modules_dir($conf);
            httpd_symlink($httpd_root, $target, $path);
        }
    };
}

main();
